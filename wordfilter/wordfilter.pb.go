// Code generated by protoc-gen-go.
// source: wordfilter.proto
// DO NOT EDIT!

/*
Package wordfilter is a generated protocol buffer package.

It is generated from these files:
	wordfilter.proto

It has these top-level messages:
	WordFilterRequest
	WordFilterResponse
*/
package wordfilter

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WordFilterRequest struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *WordFilterRequest) Reset()         { *m = WordFilterRequest{} }
func (m *WordFilterRequest) String() string { return proto.CompactTextString(m) }
func (*WordFilterRequest) ProtoMessage()    {}

type WordFilterResponse struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *WordFilterResponse) Reset()         { *m = WordFilterResponse{} }
func (m *WordFilterResponse) String() string { return proto.CompactTextString(m) }
func (*WordFilterResponse) ProtoMessage()    {}

func init() {
	proto.RegisterType((*WordFilterRequest)(nil), "wordfilter.WordFilterRequest")
	proto.RegisterType((*WordFilterResponse)(nil), "wordfilter.WordFilterResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for WordFilterService service

type WordFilterServiceClient interface {
	Filter(ctx context.Context, in *WordFilterRequest, opts ...grpc.CallOption) (*WordFilterResponse, error)
}

type wordFilterServiceClient struct {
	cc *grpc.ClientConn
}

func NewWordFilterServiceClient(cc *grpc.ClientConn) WordFilterServiceClient {
	return &wordFilterServiceClient{cc}
}

func (c *wordFilterServiceClient) Filter(ctx context.Context, in *WordFilterRequest, opts ...grpc.CallOption) (*WordFilterResponse, error) {
	out := new(WordFilterResponse)
	err := grpc.Invoke(ctx, "/wordfilter.WordFilterService/Filter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WordFilterService service

type WordFilterServiceServer interface {
	Filter(context.Context, *WordFilterRequest) (*WordFilterResponse, error)
}

func RegisterWordFilterServiceServer(s *grpc.Server, srv WordFilterServiceServer) {
	s.RegisterService(&_WordFilterService_serviceDesc, srv)
}

func _WordFilterService_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(WordFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(WordFilterServiceServer).Filter(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _WordFilterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wordfilter.WordFilterService",
	HandlerType: (*WordFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Filter",
			Handler:    _WordFilterService_Filter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
